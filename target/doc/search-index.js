var searchIndex = JSON.parse('{\
"sudoxu":{"doc":"Sudoxu","t":"AAAIKKAAAAANEDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDELLLLLLLLLLLLLLLLLLLLLLLLLDIILLLLLLLLALLLLLLLLLLLLGGGLLDENNLLLLLLLLLLLLLLLLLLLLLLLNNNDDELLLLLLMLLLLLLLLLLLLLMMLLLMLLLLLLLLLLLLL","n":["finders","solvers","structs","Solver","init","solve","cell","grid","idx","num","section","BannedBits","CandidateError","Cell","KnownMultipleNum","KnownNoNum","MultipleUniqueCandidates","NoCandidates","ParseError","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","default","eq","eq","equivalent","fmt","fmt","fmt","from","from","into","into","is_known","new","new_known","new_unchecked","remove_candidates","set_candidates","set_known","single_candidate","to_owned","to_owned","to_string","to_u16","try_from","try_from","try_into","try_into","type_id","type_id","zerod","FromStringError","Grid","GridError","borrow","borrow","borrow_mut","borrow_mut","default","fmt","fmt","from","from","get","get_mut","into","into","known_cell_update_neighbours","section","sections","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unique_candidate","Idx","IntoIdx","TryIntoIdx","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","idxs","inner_idxs","into","new","new_unchecked","section_idxs","to_idx","to_owned","to_string","try_from","try_into","try_to_idx","type_id","GridIdx","InnerIdx","SectionIdx","inner_idxs","section_idxs","Num","NumErr","TooBig","Zero","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from","into","into","new","new_unchecked","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Box","Column","Row","Section","SectionInfo","SectionKind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","from","grid_idxs","idx","info","into","into","into","kind","new","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_candidate"],"q":[[0,"sudoxu"],[3,"sudoxu::solvers"],[6,"sudoxu::structs"],[11,"sudoxu::structs::cell"],[58,"sudoxu::structs::grid"],[86,"sudoxu::structs::idx"],[110,"sudoxu::structs::idx::idxs"],[115,"sudoxu::structs::num"],[142,"sudoxu::structs::section"],[187,"core::result"],[188,"core::fmt"],[189,"core::fmt"],[190,"alloc::string"],[191,"core::any"],[192,"core::convert"]],"d":["Finders are methods that identify when a cell is known …","Sudoku solver functionality.","Structs representing various parts of a sudoku grid, along …","A sudoku solver.","Initialisation taking in a <code>Grid</code>.","Solve the grid. The returned <code>Grid</code> is expected to be solved.","The cells in a sudoku grid.","the sudoku grid","safe indexing into comptime known arrays","the known value within a cell. <code>1 &lt;= N &lt;= 9</code>.","A row, column, or box within the grid. Internally a …","Bits set within the banned sector. <code>Cell &gt;= 1024 ( = 2^10 )</code>","Errors relating to a Cell’s candidates.","A cell within the grid. Holds information about what …","Known bit is set but multiple candidates are also set. …","Known bit is set but no candidates are set. <code>Cell == 1</code>","Cell has multiple unique candidates within its sections. …","Cell contains no candidates. <code>Cell == 0</code>","Error when parsing a Cell from a String.","","","","","Checks if a given <code>Cell</code> has an allowed representation.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the known bit is set.","Creates a new <code>Cell</code> from an inner <code>u16</code>. Returns a …","Creates a Cell with a known value from a Num.","Creates a new <code>Cell</code>, which can either contain multiple …","Removes the candidate bits set in the mask from the cell.","Adds the set candidate bits in the <code>CellMask</code> to the <code>Cell</code>.","Sets the known bit of the given cell.","Checks if a <code>Cell</code> is not known and only contains a single …","","","","Returns the inner <code>u16</code> within the Cell.","","","","","","","Wrapper for <code>Cell::new_unchecked(0)</code>","Error in parsing a <code>String</code> into a <code>Grid</code>.","The sudoku Grid.","Grid-related errors","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a copy of the <code>Cell</code> the given index.","Get a mutable reference to the <code>Cell</code> at the given index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Update the neighbours (all remaining <code>Cell</code>s in each <code>Section</code>…","Returns (a copy of) the specified <code>Section</code>.","Returns (copies of) the <code>Section</code>s of the <code>Cell</code> at the given …","","Attempts to convert a <code>String</code> into a Grid. Ignores any non …","","","","","","","Checks if a <code>Cell</code> contains a unique candidate within its …","A number <code>x</code> guaranteed to satisfy <code>x &lt; N</code>. Used for indexing …","uint -&gt; Idx","Safe “uint” -&gt; Idx","","","","","","","","Returns the argument unchanged.","Concrete <code>Idx</code>s for use within Sudoku solving.","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Calls <code>U::from(self)</code>.","Tries to create an <code>Idx&lt;N&gt;</code> from a <em>uint</em>. Returns None if the …","Create an <code>Idx&lt;N&gt;</code> from a <code>usize</code>.","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","Casts a uint into an <code>Idx&lt;N&gt;</code>, without performing the bounds …","","","","","Tries to cast a uint into an <code>Idx&lt;N&gt;</code>. Returns <code>None</code> if <code>self</code> …","","An index into the cells of a grid:","An index into a <code>Section</code>’s Cells. For rows(columns) these …","An index into the sections of a grid. For rows and …","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","A known number within a <code>Cell</code>, satisfying <code>1 &lt;= N &lt;= 9</code>.","<code>Num</code>-related errors.","<code>n &gt; 9</code>","<code>n == 0</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>Num</code> from a <code>u8</code>. Returns an error if <code>n</code> is not in …","Creates a <code>Num</code> from a <code>u8</code>. Does not apply the bounds check.","","","","","","","","Box: 3x3 square within the grid.","Column: Vertical line within the grid.","Row: Horizontal line within the grid.","A row, column, or box of <code>Cell</code>s.","Information to identify a Section within the grid.","An enum for representing the kinds of <code>Section</code>s.","","","","","","","The underlying array of <code>Cell</code>s.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the grid indexes of the provided section.","What (section) index is it.","The information linking to what <code>Section</code> within the <code>Grid</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","What kind of <code>Section</code> is it.","Create a new <code>SectionInfo</code>.","","","","","","","","","","","","Finds if the <code>Cell</code> at <code>inner_idx</code> contains a candidate found …"],"i":[0,0,0,0,26,26,0,0,0,0,0,3,0,0,3,3,3,3,3,2,3,2,3,2,2,3,2,3,2,2,3,2,2,2,3,2,3,2,3,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,3,2,3,2,13,0,0,1,13,1,13,1,1,13,1,13,1,1,1,13,1,1,1,1,1,1,13,1,13,1,13,1,0,0,0,18,18,18,18,18,18,18,18,0,18,18,18,18,18,27,18,18,18,18,28,18,0,0,0,14,14,0,0,23,23,9,23,9,23,9,9,9,9,9,23,9,23,9,23,9,9,9,9,23,9,23,9,23,25,25,25,0,0,0,16,15,25,16,15,25,16,15,25,15,25,15,25,16,15,25,16,15,25,15,15,16,16,15,25,15,15,15,25,16,15,25,16,15,25,16,15,25,16],"f":[0,0,0,0,[1],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[2,[[4,[3]]]],[2,2],[3,3],[[]],[[]],[[],2],[[2,2],5],[[3,3],5],[[],5],[[2,6],7],[[2,6],7],[[3,6],7],[[]],[[]],[[]],[[]],[2,5],[8,[[4,[2,3]]]],[9,2],[8,2],0,0,[2],[2,[[10,[9]]]],[[]],[[]],[[],11],[2,8],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[],2],0,0,0,[[]],[[]],[[]],[[]],[[],1],[[1,6],7],[[13,6],7],[[]],[[]],[[1,14],2],[[1,14],2],[[]],[[]],[[1,14]],[[1,15],16],[[1,14],[[17,[16]]]],[[],11],[11,[[4,[1]]]],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[1,14],[[4,[[10,[9]],3]]]],0,0,0,[[]],[[]],[18,18],[[]],[[18,18],5],[[18,6],7],[[18,6],7],[[]],0,[18,[[17,[19]]]],[[]],[[[21,[20]]],[[10,[18]]]],[[[21,[20]]],18],[18,[[17,[22]]]],[[],18],[[]],[[],11],[[],4],[[],4],[[],[[10,[18]]]],[[],12],0,0,0,[14,[[17,[19]]]],[14,[[17,[22]]]],0,0,0,0,[[]],[[]],[[]],[[]],[9,9],[[]],[[9,9],5],[[],5],[[9,6],7],[[23,6],7],[[]],[[]],[[]],[[]],[24,[[4,[9,23]]]],[24,9],[[]],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[15,15],[25,25],[[]],[[]],[[15,15],5],[[25,25],5],[[16,6],7],[[15,6],7],[[25,6],7],[[]],[[]],[[]],[15,[[17,[14]]]],0,0,[[]],[[]],[[]],0,[[25,22],15],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],12],[[],12],[[],12],[[16,19],[[4,[[10,[9]],3]]]]],"c":[],"p":[[3,"Grid",58],[3,"Cell",11],[4,"CandidateError",11],[4,"Result",187],[15,"bool"],[3,"Formatter",188],[6,"Result",188],[15,"u16"],[3,"Num",115],[4,"Option",189],[3,"String",190],[3,"TypeId",191],[4,"GridError",58],[6,"GridIdx",110],[3,"SectionInfo",142],[3,"Section",142],[15,"array"],[3,"Idx",86],[6,"InnerIdx",110],[15,"usize"],[8,"Into",192],[6,"SectionIdx",110],[4,"NumErr",115],[15,"u8"],[4,"SectionKind",142],[8,"Solver",3],[8,"IntoIdx",86],[8,"TryIntoIdx",86]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
